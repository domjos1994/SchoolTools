/*
 * Copyright (C) 2017-2022  Dominic Joas
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 3
 * of the License, or (at your option) any later version.
 */

ext.propVersion = 27
ext.propVersionCode = "1.2.1"

ext.propJavaVersion = "8"

ext.propCompVersion = 33
ext.propMinVersion = 21
ext.propAndroidVersion = "1.6.1"

ext.propJUnitVersion = "4.13.2"
ext.propEspressoVersion = "3.5.1"

ext.propCustomWidgetsVersion = '3.5.0'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.3.1'
        
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/ksoap2-android-releases/' }
    }
}

tasks.register('clean', Delete) {
    delete rootProject.buildDir
}

tasks.register('customZip', Zip) {
    clean
    from '.'
    include 'build.gradle'
    include '.gitignore'
    include 'LICENSE'
    include 'README.md'
    include '*.java'
    include 'data/**'
    include 'app/**'
    include 'schooltoolslib/**'
    include 'customwidgets/**'
    include 'gradle.properties'

    exclude 'schooltoolslib/build'
    exclude 'app/build'
    exclude 'customwidgets/build'
    archiveFileName = rootProject.name + '.zip'
    destinationDirectory = file(rootProject.rootDir)
}

tasks.register('archiveReleases', Copy) {
    def appPath = projectDir.toString() + "/app"
    def releasePath = appPath + "/release"
    def apkDebugPath = appPath + "/build/outputs/apk/debug"
    def aabDebugPath = appPath + "/build/outputs/bundle/debug"

    from apkDebugPath
    from aabDebugPath
    from releasePath

    // generate path
    def release
    def type
    if (propVersionCode.contains(".beta")) {
        release = propVersionCode.split("\\.beta")[0].trim()
        type = "beta/"
    } else if (propVersionCode.contains(".alpha")) {
        release = propVersionCode.split("\\.alpha")[0].trim()
        type = "alpha/"
    } else {
        release = propVersionCode
        type = ""
    }

    into "${projectDir}/data/releases/Version ${release}/${type}"
}